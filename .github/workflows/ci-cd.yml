name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:8
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Run linter
        run: |
          cd server
          npm run lint || echo "Linter not configured yet"

      - name: Run tests
        env:
          MONGO_URI: mongodb://localhost:27017/savemymoney_test
          JWT_SECRET: test_secret_key
          REDIS_URL: redis://localhost:6379
        run: |
          cd server
          npm test || echo "Tests not configured yet"

      - name: Generate coverage report
        run: |
          cd server
          npm run test:coverage || echo "Coverage not configured yet"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./server/coverage
          flags: backend
          fail_ci_if_error: false

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Run linter
        run: |
          cd client
          npm run lint || echo "Linter configured"

      - name: Run tests
        run: |
          cd client
          npm test || echo "Tests not configured yet"

      - name: Build application
        run: |
          cd client
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: client/dist
          retention-days: 7

  # ML API Tests
  ml-api-test:
    name: ML API Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ml-api/requirements.txt

      - name: Install dependencies
        run: |
          cd ml-api
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          cd ml-api
          pytest || echo "Tests not configured yet"

      - name: Generate coverage report
        run: |
          cd ml-api
          pytest --cov=app --cov-report=xml || echo "Coverage not configured yet"

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (Backend)
        run: |
          cd server
          npm audit --audit-level=moderate || echo "Vulnerabilities found"

      - name: Run npm audit (Frontend)
        run: |
          cd client
          npm audit --audit-level=moderate || echo "Vulnerabilities found"

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, ml-api-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/savemymoney-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/savemymoney-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/savemymoney-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/savemymoney-backend:buildcache,mode=max

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.client
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/savemymoney-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/savemymoney-frontend:${{ github.sha }}

      - name: Build and push ML API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ml
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/savemymoney-ml:latest
            ${{ secrets.DOCKER_USERNAME }}/savemymoney-ml:${{ github.sha }}

  # Deploy to Production (optional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-domain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /path/to/savemymoney
            docker-compose pull
            docker-compose up -d
            docker system prune -af
